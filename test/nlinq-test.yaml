todo:
- Load nLinq
- Load sample data
- Results

- Selector::Simple result
- Selector::Simple result function
- Selector::Simple result function transform
- Selector::Simple result map
- Selector::Simple array min
- Selector::Simple array max
- Selector::Simple array sum
- Selector::Simple array average
- Selector::Simple at selector
- Selector::Simple count selector
- Selector::Simple reverse selector
- Selector::Sub-map group selector
- Selector::Sub-map group by selector
- Selector::Sub-map boolean group selector 
- Selector::Sub-map selector
- Selector::Array selector
- Selector::Simple limit selector
- Selector::All
- Selector::Last
- Selector::Assign
- Selector::SkipTake
- Selector::Join
- Selector::Map conversion
- Selector::CountBy

- Where::Sub-map group selector
- Where::Removed
- Where::Main constraints
- Where::Case
- Where::Dollar
- Where::Filter
- Where::toDate

- Sort::Sort by sub-maps
- Join::Simple join
- Intersect::Simple intersect
- Except::Simple except
- Cartesian::Simple cartesian

- Stream::Stream with limit
- Stream::Stream simple test

- Query::Simple query 1
- Query::Simple query 2

include:
- oJobTest.yaml

ojob:
  async : false
  opacks:
  - oJob-common
  - openaf: 20200523
  catch       : logErr(exception);
  logToConsole: true 

jobs:
# ----------------
- name: Load nLinq
  exec: |
    args.nlinq = _$(args.nlinq, "nlinq").default("../dist/openafnlinq.js");
    loadLib(args.nlinq);

# ----------------------
- name: Load sample data
  exec: |
    args.test = _$(args.test).default(".");
    global.data = io.readFileJSON(args.test + "/data.json");
    global.data2 = io.listFiles(args.test + "/.").files;

# -------------
- name: Results
  from: oJob Test Results
  type: shutdown
  args:
    quiet: true
  exec: |
    tprint("Tests PASSED: {{pass}}/{{count}}", args.results);
    tprint("Tests FAILED: {{fail}}/{{count}}", args.results);
    if (args.results.fail > 0) printErr("There are failed tests");
    io.writeFileString("nlinq-test.md", ow.test.toMarkdown());
    io.writeFileJSON("nlinq-test.json", args.results);

# ------------------------------
- name: Selector::Simple result
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data2).select();
      ow.test.assert(global.data2.length, res.length, "Problem with the simple result test.");

# ---------------------------------------
- name: Selector::Simple result function
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data2).select(r => r);
      ow.test.assert(global.data2.length, res.length, "Problem with the simple function test.");

# -------------------------------------------------
- name: Selector::Simple result function transform
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data2).select(r => {
        if (r.isFile) return 1; else return 0;
      });
      ow.test.assert(global.data2.length, res.length, "Problem with the simple function transform test.");

# ----------------------------------
- name: Selector::Simple result map
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data2).select({ isFile: false });
      ow.test.assert(Object.keys(res[0]).length, 1, "Problem with the simple map test test.");

# ---------------------------------
- name: Selector::Simple array min
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3];

      var res = $from(ar).min();
      ow.test.assert(res, 1, "Problem with simple array min.");

# ---------------------------------
- name: Selector::Simple array max
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3];

      var res = $from(ar).max();
      ow.test.assert(res, 3, "Problem with simple array max.");

# ---------------------------------
- name: Selector::Simple array sum
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3];

      var res = $from(ar).sum();
      ow.test.assert(res, 6, "Problem with simple array sum.");

# -------------------------------------
- name: Selector::Simple array average
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3];

      var res = $from(ar).average();
      ow.test.assert(res, 2, "Problem with simple array average.");

# -----------------------------------
- name: Selector::Simple at selector
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3];

      ow.test.assert($from(ar).at(0), 1, "Problem with simple at selector (1)");
      ow.test.assert($from(ar).at(1), 2, "Problem with simple at selector (2)");
      ow.test.assert($from(ar).at(2), 3, "Problem with simple at selector (3)");

# --------------------------------------
- name: Selector::Simple count selector
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3];

      ow.test.assert($from(ar).count(), 3, "Problem with simple count selector");

# -------------------------------------
- name: Selector::Simple limit selector
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [1, 2, 3, 4, 5];

      ow.test.assert($from(ar).limit(3).count(), 3, "Problem with simple limit selector (1)");
      ow.test.assert($from(ar).limit(-2).count(), 2, "Problem with simple limit selector (2)");
      ow.test.assert($from(ar).limit(-1).at(0), 5, "Problem with simple limit selector (3)");
      ow.test.assert($from(ar).limit(1).at(0), 1, "Problem with simple limit selector (4)");

# ----------------------------------------
- name: Selector::Simple reverse selector
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |    
      var ar = [1, 2, 3];

      ow.test.assert($from(ar).reverse()[0], 3, "Problem with simple reverse selector");

# ---------------------------------------
- name: Selector::Sub-map group selector
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).group("address.state");

      ow.test.assert(res.NY.length, 98, "Problem with sub-map group selector (1)");
      ow.test.assert(res.VA.length, 33, "Problem with sub-map group selector (2)");

# -----------------------------------------
- name: Selector::Sub-map group by selector
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).groupBy("address.state,address.city")

      ow.test.assert(res.NY["Saratoga Springs"].length, 2, "Problem with sub-map group by selector (1)")
      ow.test.assert(res.VA.Richmond.length, 2, "Problem with sub-map group by selector (2)")


# ------------------------------
- name: Selector::Array selector
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).equals("address.state", "NY").select(["state:address.state", "phone"])

      ow.test.assert(res.length, 98, "Problem with array selector (1)")
      ow.test.assert(isDef(res[0].state), true, "Problem with array selector (2)")
      ow.test.assert(isDef(res[0].phone), true, "Problem with array selector (3)")

# -----------------------
- name: Selector::CountBy
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).countBy("address.state", "count", "state")

      ow.test.assert($from(res).equals("state", "NY").at(0).count, 98, "Problem with countBy (1)")
      ow.test.assert($from(res).equals("state", "VA").at(0).count, 33, "Problem with countBy (2)")

      var res2 = $from(global.data).equals("address.state", "NY")

      ow.test.assert(res2.countBy("address.zip,address.city").length, 69, "Problem with countBy (3)")
      ow.test.assert(res2.equals("address.city", "Monroe").countBy("address.state,address.city")[0]._count, 4, "Problem with countBy (4)")

# --------------------------------
- name: Selector::Sub-map selector
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).equals({
        address: {
          state: "NY"
        }
      })

      ow.test.assert(res.count(), 98, "Problem with sub-map selector")

# -------------------
- name: Selector::All
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from( [1, 2, 3, 4, 5] ).greater(0).all(), true, "Problem with all (1)");
      ow.test.assert($from( [1, 2, 3, 4, 5] ).less(0).all(), false, "Problem with all (2)");

# --------------------
- name: Selector::Last
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from( [1, 2, 3, 4, 5] ).greater(0).last(), 5, "Problem with last (1)");
      ow.test.assert($from( [1, 2, 3, 4, 5] ).less(6).last(), 5, "Problem with last (2)");

# ----------------------
- name: Selector::Assign
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data)
      .assign([{ state: "NY" }], "extra", "address.state", "state", { extra: { state: "" } })
      .first();

      ow.test.assert(res.extra.state, "NY", "Problem with assign.");

# --------------------
- name: Selector::Skip
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from([1,2,3,4,5]).skip(4).count(), 1, "Problem with skip.");

# --------------------
- name: Selector::Take
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from([1,2,3,4,5]).take(4).count(), 4, "Problem with take.");

# ------------------------
- name: Selector::SkipTake
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from([1,2,3,4,5]).skipTake(3, 2).select(), [4, 5], "Problem with skipTake.");

# --------------------
- name: Selector::Join
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var res = $from([{ id: 1, t: 1}, {id: 2, t: 2}, {id: 3, t: 1}, {id: 4, t: 2 }])
      .join([{t: 1, type: "ACTIVE"}, { t: 2, type: "INACTIVE" }], "type", "t", "t")
      .select(r => { r.type = r.type[0].type; return r });

      ow.test.assert(res[0].type, "ACTIVE", "Problem with join.");

# ------------------------------
- name: Selector::Map conversion
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var res1 = $from(global.data2).mselect(void 0, "filename")
      ow.test.assert(isMap(res1), true, "Problem with array to map conversion")
      

      var res2 = $from(res1, "filename").select()
      ow.test.assert(isArray(res2), true, "Problem with map to array conversion")

# -----------------------------
- name: Where::Main constraints
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
        ow.test.assert( $from(global.data).starts("name", "Finnegan").count(), 1, "Problem with starts.");
        ow.test.assert( $from(global.data).ends("name", "Taylor").count(), 1, "Problem with ends.");
        ow.test.assert( $from(global.data).equals("email", "angeline.novak@icloud.com").count(), 1, "Problem with equals.");
        ow.test.assert( $from(global.data).greater("address.zip", 11704).count(), 795, "Problem with greater.");
        ow.test.assert( $from(global.data).less("address.zip", 11704).count(), 203, "Problem with less.");
        ow.test.assert( $from(global.data).greaterEquals("address.zip", 11704).count(), 797, "Problem with greaterEquals.");
        ow.test.assert( $from(global.data).lessEquals("address.zip", 11704).count(), 205, "Problem with lessEquals.");
        ow.test.assert( $from(global.data).contains("email", "@icloud.com").count(), 74, "Problem with contains.");
        ow.test.assert( $from(global.data).empty("address.zone").count(), 1000, "Problem with empty (1).");
        ow.test.assert( $from(global.data).empty("address.zip").count(), 0, "Problem with empty (2).");
        ow.test.assert( $from(global.data).match("email", "\@icloud\.com$").count(), 74, "Problem with match.");
        ow.test.assert( $from(global.data).type("address.type", "string").count(), 0, "Problem with type (1).");
        ow.test.assert( $from(global.data).type("address.address", "string").count(), 1000, "Problem with type (2).");
        ow.test.assert( $from(global.data).between("address.zip", 45780, 45781).count(), 0, "Problem with between (1).");
        ow.test.assert( $from(global.data).betweenEquals("address.zip", 45780, 45781).count(), 1, "Problem with between (2).");
        ow.test.assert( $from(global.data).attach("isICloud", r => r.email.endsWith("@icloud.com")).is("isICloud").count(), 74, "Problem with is.");

# -------------------
- name: Where::toDate
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = []
      ar.push({ i: 0, d: 1568402110742 })
      ar.push({ i: 1, d: "2018-01-01T01:12:23" })
      ar.push({ i: 2, d: 1168402138776 })
      ar.push({ i: 3, d: "2018-01-09" })

      var r = $from(ar).toDate("d").sort("d").select()

      ow.test.assert(r[0].i, 2, "Problem with toDate (1)")
      ow.test.assert(r[1].i, 1, "Problem with toDate (2)")
      ow.test.assert(r[2].i, 3, "Problem with toDate (3)")
      ow.test.assert(r[3].i, 0, "Problem with toDate (4)")

# --------------------
- name: Where::Removed
  deps:
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from([1,2,3,4,5]).greater(3).removed().select(), [1, 2, 3], "Problem with removed.");

# -------------------
- name: Where::Dollar
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from(["$$.g", "$$.s"]).equals("$$.g").count(), 1, "Problem with where equals dollar.");
      ow.test.assert($from(["$$.g", "$$.s"]).match("\\\$\\\$.g").count(), 1, "Problem with where match dollar.")

# -------------------
- name: Where::Filter
  to  : oJob Test
  args:
    func: |
      var dat1 = [{ x: 1, y: 1, a: 1 }, { x: 1, y: 2, a: 1}];
      ow.test.assert($from(dat1).filter({x: 1, y: 1}).count(), 1, "Problem with filter of map to map (1)");
      ow.test.assert($from(dat1).filter({x: 1, a: 1}).count(), 2, "Problem with filter of map to map (2)");
      ow.test.assert($from(dat1).filter(r => r.y == 1).count(), 1, "Problem with filter of function");

      var dat2 = [ [1, 2], [1, 3]];
      ow.test.assert($from(dat2).filter(1).count(), 2, "Problem with filter of array (1)"); 
      ow.test.assert($from(dat2).filter(2).count(), 1, "Problem with filter of array (2)"); 

      var dat3 = [ 1, 1, 2, 3];
      ow.test.assert($from(dat3).filter(1).count(), 2, "Problem with filter of value (1)");
      ow.test.assert($from(dat3).filter(2).count(), 1, "Problem with filter of value (2)");

# -----------------
- name: Where::Case
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      ow.test.assert($from(["abc", "ABC"]).equals("AbC").count(), 2, "Problem with case insensitive (1).");
      ow.test.assert($from(["abc", "ABC"]).useCase(true).equals("AbC").count(), 0, "Problem with case sensitive (1).");

      ow.test.assert($from(global.data).starts("name", "CArInA").count(), 1, "Problem with case insensitive (2).");
      ow.test.assert($from(global.data).useCase(true).starts("name", "CArInA").count(), 0, "Problem with case sensitive (2).");

      ow.test.assert($from(global.data).starts("address.state", "ny").any(), true, "Problem with case insensitive (3).");
      ow.test.assert($from(global.data).useCase(true).starts("address.state", "ny").any(), false, "Problem with case sensitive (3).");

# -----------------------------------
- name: Where::Sub-map group selector
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).ends("email", "yahoo.com").equals("address.zip", 7424);

      ow.test.assert(res.count(), 1, "Problem with sub-map query count.");
      ow.test.assert(res.first().phone, "2764614795", "Problem with sub-map query select.");

# ----------------------------
- name: Sort::Sort by sub-maps
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = $from(global.data).sort("address.state", "-address.zip").first();

      ow.test.assert(res.address.zip, 99654, "Problem with sort by sub-maps.");

# -----------------------
- name: Join::Simple join
  deps: Load nLinq
  args:
    func: |
      ow.test.assert($from([1,2,3]).join([4]).count(), 4, "Problem with simple join.");

# -----------------------
- name: Intersect::Simple intersect
  deps: Load nLinq
  args:
    func: |
      ow.test.assert($from([1,2,3]).intersect([3,4]).count(), 1, "Problem with simple intersect.");

# -----------------------
- name: Except::Simple except
  deps: Load nLinq
  args:
    func: |
      ow.test.assert($from([1,2,3]).except([3,4]).count(), 2, "Problem with simple except.");

# ---------------------------------
- name: Cartesian::Simple cartesian
  deps: Load nLinq
  args:
    func: |
      ow.test.assert($from([1,2]).cartesian([3,4]).select(), [[1,3],[1,4],[2,3],[2,4]], "Problem with cartesian for numbers.");
      ow.test.assert($from([1,2]).cartesian([true, false]).select(), [[1,true],[1,false],[2,true],[2,false]], "Problem with cartesian for booleans.");
      ow.test.assert($from([1,2]).cartesian([{s: true}, {s: false}]).select(), [{s: true},{s: false},{s: true},{s: false}], "Problem with cartesian for maps.");
      ow.test.assert($from([{n:1},{n:2}]).cartesian([{s: true},{s: false}]).select(), [{n: 1, s: true}, {n: 1, s: false}, {n: 2, s: true}, {n: 2, s: false}], "Problem with cartesian maps with maps.");

# ----------------------------------------------
- name: Selector::Sub-map boolean group selector 
  deps: 
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res = global.data.map(r => {
        var t = clone(r);
        t.test = Boolean(t.address.zip % 2);
        return t;
      });

      var o = $from(res).group("test");

      ow.test.assert(o["true"].length + o["false"].length, global.data.length, "Problem with boolean group selector.");

# -------------------------------
- name: Stream::Stream with limit
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [];
      $from( Math.random ).limit(10).stream(r => ar.push(ar));

      ow.test.assert(ar.length, 10, "Problem with stream with limit.");

# --------------------------------
- name: Stream::Stream simple test
  deps: 
  - Load nLinq
  to  : oJob Test
  args:
    func: |
      var ar = [ 1, 2, 3, 4, 5], rs = [];
      $from(() => { return ar.pop() }).stream(r => rs.push(r));

      ow.test.assert(rs.length, 5, "Problem with stream (1)");
      ow.test.assert(ar.length, 0, "Problem with stream (2)");

# ---------------------------
- name: Query::Simple query 1
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res1 = $from(global.data).sort("address.state", "-address.zip").first()
      var res2 = $from(global.data).query({
        transform: [
          {
            func: "sort",
            args: [
              "address.state",
              "-address.zip"
            ] 
          }
        ], 
        selector: {
          func: "first",
          args: []
        }
      })

      ow.test.assert(res1.address.zip, res2.address.zip, "Problem with simple query 1.")

# ---------------------------
- name: Query::Simple query 2
  deps:
  - Load nLinq
  - Load sample data
  to  : oJob Test
  args:
    func: |
      var res1 = $from(global.data).ends("email", "yahoo.com").equals("address.zip", 7424).count()
      var res2 = $from(global.data).query({
        where: [
          {
            cond: "ends",
            args: [
              "email",
              "yahoo.com"
            ]
          }, {
            cond: "equals",
            args: [
              "address.zip",
              7424
            ]
          }
        ],
        selector: {
          func: "count"
        }
      })

      ow.test.assert(res1, res2, "Problem with simple query 2.")